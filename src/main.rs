use core::str;
use std::str::FromStr;
use std::{collections::HashSet, fs::read_to_string};
use std::net::IpAddr;
use clap::Parser;

#[derive(Parser, Debug)]
#[command(version, about, long_about = None)]
struct Args {
    /// File path to open
    #[arg(short, long)]
    path: Option<String>
}

fn main() {
    let args = Args::parse();
    let mut ip_addr: HashSet<IpAddr> = HashSet::new();

    let log_path = match args.path {
        Some(path) => path,
        None => String::from("/var/log/auth.log")
    };
    
    let lines = read_to_string(log_path).unwrap();  // ip-blocklist-dirty is from auth.log
    let binding_lines = lines.lines();
    for line in binding_lines {
        let l: Vec<&str> = line.split(' ').collect();
        // ip_addr.push(IpAddr::from_str(l[9]).unwrap());
        ip_addr.insert(IpAddr::from_str(l[9]).unwrap());
    }

    for ip in ip_addr {
        println!("{}", ip)
    }

}
