use clap::Parser;
use core::str;
use std::net::IpAddr;
use std::str::FromStr;
use std::{collections::HashSet, fs::read_to_string};

#[derive(Parser, Debug)]
#[command(version, about, long_about = None)]
struct Args {
    /// File path to open
    #[arg(short, long)]
    path: Option<String>,

    /// Sort the output by comparing IP addresses
    #[arg(short, long)]
    sorted: bool,

    /// make the output as a single line
    #[arg(short, long)]
    oneline: bool,
}

fn main() {
    let args = Args::parse();
    let mut ip_addr: HashSet<IpAddr> = HashSet::new();

    let log_path = match args.path {
        Some(path) => path,
        None => String::from("/var/log/auth.log"),
    };

    let lines = read_to_string(log_path).unwrap(); // ip-blocklist-dirty is from auth.log
    let binding_lines = lines.lines();
    for line in binding_lines {
        let l: Vec<&str> = line.split(' ').collect();
        // ip_addr.push(IpAddr::from_str(l[9]).unwrap());
        ip_addr.insert(IpAddr::from_str(l[9]).unwrap());
    }

    let mut ip_addr = Vec::from_iter(ip_addr.clone());
    if args.sorted == true {
        ip_addr.sort()
    }

    if args.oneline == false {
        for ip in ip_addr {
            println!("{}", ip);
        }
    } else {
        println!("{:?}", ip_addr);
    }
}
